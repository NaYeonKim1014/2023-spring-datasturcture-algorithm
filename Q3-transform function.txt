< p 11 >
int transform(char*key){
    int number = 0;
    while(*key)
        number += *key++;
    return number;
}

int hash(char *key){
    return(transform(key)% TABLE_SIZE);
}

Q. The transform function (on p11) produced a biased hash function?
what transformation would you suggest?

A. The transform function in this code simply sums up the ASCII values of each character in the input string, which could result in a biased hash function if some characters appear more frequently than others. To improve the quality of the hash function, we could use a more sophisticated transformation method that takes into account the positions of the characters in the string.

One possible approach is to multiply each ASCII value by a prime number raised to the power of the character's position in the string, and then summing these values to generate the final hash value. This can help distribute the hash values more evenly and reduce collisions.

< python >
def transform(key):
    number = 0
    prime = 31 # prime number to use for hashing
    
    for i in range(len(key)):
        number += ord(key[i]) * (prime ** i)
    
    return number

